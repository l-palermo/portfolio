"use client";

import styles from "./page.module.css";
import { useLayoutEffect } from "react";
import ForwardSlashIcon from "../svgs/forward-slash.svg";
import TelephoneIcon from "../svgs/telephone.svg";
import MailIcon from "../svgs/mail.svg";
import LinkedinIcon from "../svgs/linkedin-logo.svg";
import GithubIcon from "../svgs/github-logo.svg";
import Link from "next/link";

function scrollTop() {
  window.scrollTo(0, 0);
}

const updateDomElements: IntersectionObserverCallback = (entries, observer) => {
  const sphere = document.getElementById("sphere");
  const header = document.getElementById("header");
  const footer = document.getElementById("footer");
  const { intersectionRatio, isIntersecting, intersectionRect } =
    entries.find((element) => element.target.id === "details") || {};

  console.log(intersectionRatio, isIntersecting, intersectionRect);

  if (
    (Number(intersectionRatio) >= 0.9 || Number(intersectionRect?.top) === 0) &&
    footer
  ) {
    footer.className = `${styles.footer} ${styles["footer--dark"]}`;
  } else if (
    (Number(intersectionRatio) >= 0.1 || Number(intersectionRect?.top) === 0) &&
    sphere &&
    header &&
    footer
  ) {
    sphere.className = styles.sphereDisplayNone;
    header.className = `${styles["header-group"]} ${styles["header-group--relative"]}`;
    footer.className = styles.footer;
  } else if (sphere && header && footer) {
    header.className = `${styles["header-group"]} ${styles["header-group--fixed"]}`;
    sphere.className = styles.sphere;
    footer.className = styles.footer;
  }
};

const options = {
  threshold: [0.1, 0.5, 0.9],
};

export default function Home() {
  useLayoutEffect(() => {
    const rootElement = document.getElementById("details");
    if (document && rootElement) {
      const observer = new IntersectionObserver(updateDomElements, options);
      observer.observe(rootElement);
      addEventListener("beforeunload", scrollTop);
    }
    return () => {
      removeEventListener("beforeunload", scrollTop);
    };
  }, []);

  const isMobile =
    window &&
    (window.navigator.userAgent.toLowerCase().includes("mobile") ||
      window.navigator.maxTouchPoints >= 1 ||
      true);

  return (
    <div id="root" className={styles}>
      <hgroup
        id="header"
        className={`${styles["header-group"]} ${styles["header-group--fixed"]}`}
      >
        <div>
          <h1 className={styles.header}>LUIGI PALERMO</h1>
          <ForwardSlashIcon className={styles.forwardSlashIcon} />
          <h2 className={styles.headerThin}>Frontend engineer</h2>
        </div>
        {/* <p className={styles.subHeader}>
          I build accessible, inclusive products and digital experiences for the
          web.
        </p> */}
        <div id="sphere" className={styles.sphere} />
      </hgroup>
      <main className={styles.content}>
        <section id="details" className={styles.detailsSection}></section>
        <section id="about-me" className={styles.aboutMeSection}>
          <div id="about-me-content" className={styles.aboutMeContent}>
            me
          </div>
        </section>
        {/* Footer */}
      </main>
      <footer id="footer" className={styles.footer}>
        <ul>
          {isMobile ? (
            <li>
              <Link className={styles.footer__link} href="tel:+447490393368">
                <TelephoneIcon />
              </Link>
            </li>
          ) : null}
          <li>
            <Link
              className={styles.footer__link}
              href="mailto:l-palermo@hotmail.it"
            >
              <MailIcon />
            </Link>
          </li>
          <li>
            <Link className={styles.footer__link} href="tel:07490393368">
              <LinkedinIcon />
            </Link>
          </li>
          <li>
            <Link className={styles.footer__link} href="tel:07490393368">
              <GithubIcon />
            </Link>
          </li>
        </ul>
      </footer>
    </div>
  );
}
